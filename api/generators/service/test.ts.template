<% // Transforms an object or single value into something that's more suitable
   // for generating test cases
   // If a `type` is passed in, the string for creating an object of that type
   // will be generated
   // If no type, or a type we don't support, is passed in we'll default to
   // generating regular strings
   // Looks for quoted strings, either by single (') or double (") quotes.
   // When found
   // - Removes the quotes around `scenario` variables.
   // - Removes the quotes around `BigInt` fields.
  const transformValue = (obj, type) => {
    if (type === 'DateTime') {
      return `new Date('${obj.toISOString()}')`
    } else if (type === 'Decimal') {
      return `new Prisma.Decimal(${obj})`
    }

    return JSON.stringify(obj).replace(/['"].*?['"]/g, (string) => {
      if (string.match(/scenario\./)) {
        return string.replace(/['"]/g, '')
      }

      // BigInt
      if (string.match(/^\"\d+n\"$/)) {
        return string.substr(1, string.length - 2)
      }

      return string
    })
  } %>
<% if (prismaImport) { %>import { Prisma, ${prismaModel} } from '@prisma/client'<% } else { %>import type { ${prismaModel} } from '@prisma/client'<% } %>

import { ${pluralCamelName}<% if (crud) { %>,${singularCamelName}, create${singularPascalName}, update${singularPascalName}, delete${singularPascalName}<% } %> } from './${pluralCamelName}'
import type { StandardScenario } from './${pluralCamelName}.scenarios'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float.
//           Please refer to the RedwoodJS Testing Docs:
//       https://redwoodjs.com/docs/testing#testing-services
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('${pluralCamelName}', () => {
  scenario('returns all ${pluralCamelName}', async (scenario: StandardScenario) => {
    const result = await ${pluralCamelName}()

    expect(result.length).toEqual(Object.keys(scenario.${singularCamelName}).length)
  })<% if (crud) { %>

  scenario('returns a single ${singularCamelName}', async (scenario: StandardScenario) => {
    const result = await ${singularCamelName}({ ${idName}: scenario.${singularCamelName}.one.${idName} })

    expect(result).toEqual(scenario.${singularCamelName}.one)
  })

  <% if (create) { %>scenario('creates a ${singularCamelName}', async (${transformValue(create).includes('scenario.') ? 'scenario: StandardScenario' : ''}) => {
    const result = await create${singularPascalName}({
      input: ${transformValue(create)},
    })

    <% for (const [name, value] of Object.entries(create)) { %>
    expect(result.${name}).toEqual(${transformValue(value, types[name])})<% } %>
  })<% } %>

  <% if (update) { %>scenario('updates a ${singularCamelName}', async (scenario: StandardScenario) => {<% rand = parseInt(Math.random() * 10000000) %>
    const original = await (${singularCamelName}({ ${idName}: scenario.${singularCamelName}.one.${idName} })) as ${prismaModel}
    const result = await update${singularPascalName}({
      ${idName}: original.${idName},
      input: ${transformValue(update)},
    })

    <% for (const [name, value] of Object.entries(update)) { %>
    expect(result.${name}).toEqual(${transformValue(value, types[name])})<% } %>
  })<% } %>

  scenario('deletes a ${singularCamelName}', async (scenario: StandardScenario) => {
    const original = (await delete${singularPascalName}({ ${idName}: scenario.${singularCamelName}.one.${idName} })) as ${prismaModel}
    const result = await ${singularCamelName}({ ${idName}: original.${idName} })

    expect(result).toEqual(null)
  })<% } %>
})
